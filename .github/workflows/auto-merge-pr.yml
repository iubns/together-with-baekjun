name: Auto Merge PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  validate-and-merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get PR author and map to folder
        id: pr-info
        run: |
          GITHUB_ID="${{ github.event.pull_request.user.login }}"
          echo "GitHub ID: $GITHUB_ID"

          # 매핑 파일에서 폴더명 찾기
          FOLDER_NAME=""
          if [ -f ".github/user-mapping.yml" ]; then
            echo "📁 매핑 파일 존재 확인됨"
            
            # YAML 파일에서 정확한 매핑 찾기 (개선된 파싱)
            MAPPING_LINE=$(grep "^$GITHUB_ID:" .github/user-mapping.yml | head -1 || echo "")
            if [ -n "$MAPPING_LINE" ]; then
              # "key: "value"" 형식에서 value 추출
              FOLDER_NAME=$(echo "$MAPPING_LINE" | cut -d'"' -f2)
              if [ -n "$FOLDER_NAME" ]; then
                echo "✅ 매핑 발견: $GITHUB_ID -> $FOLDER_NAME"
              else
                echo "⚠️ 매핑 파싱 실패: $MAPPING_LINE"
                FOLDER_NAME=""
              fi
            else
              echo "❌ 매핑을 찾을 수 없음: $GITHUB_ID"
              echo "📋 사용 가능한 매핑들:"
              grep "^[^#].*:" .github/user-mapping.yml | head -5
            fi
          else
            echo "❌ 매핑 파일이 없음: .github/user-mapping.yml"
          fi

          echo "github_id=$GITHUB_ID" >> $GITHUB_OUTPUT
          echo "folder_name=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "PR 작성자: $GITHUB_ID (폴더: $FOLDER_NAME)"

      - name: Get changed files
        id: files
        run: |
          # PR에서 변경된 파일들 가져오기
          git diff --name-only origin/main..HEAD > changed_files.txt
          echo "변경된 파일들:"
          cat changed_files.txt

          # 변경된 파일들을 환경 변수로 저장
          CHANGED_FILES=$(cat changed_files.txt | tr '\n' ' ')
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Validate changes
        id: validate
        run: |
          GITHUB_ID="${{ steps.pr-info.outputs.github_id }}"
          FOLDER_NAME="${{ steps.pr-info.outputs.folder_name }}"
          CHANGED_FILES="${{ steps.files.outputs.changed_files }}"

          echo "🔍 PR 검증 시작..."
          echo "GitHub ID: $GITHUB_ID"
          echo "허용된 폴더명: $FOLDER_NAME"
          echo "변경된 파일들: $CHANGED_FILES"

          # 검증 규칙
          VALID=true
          REASON=""

          # 0. 매핑된 폴더명이 있는지 확인
          if [ -z "$FOLDER_NAME" ]; then
            VALID=false
            REASON="GitHub ID ($GITHUB_ID)에 대한 폴더 매핑을 찾을 수 없습니다. 관리자에게 문의하세요."
          fi

          # 1. 변경된 파일이 있는지 확인
          if [ -z "$CHANGED_FILES" ] && [ "$VALID" = "true" ]; then
            VALID=false
            REASON="변경된 파일이 없습니다."
          fi

          # 2. 각 변경된 파일이 해당 사용자 폴더 내에 있는지 확인
          if [ "$VALID" = "true" ]; then
            for file in $CHANGED_FILES; do
              echo "검사 중인 파일: $file"
              
              # 루트 파일들은 허용하지 않음 (README.md, .github 등)
              if [[ "$file" == *.md ]] && [[ "$file" != */* ]]; then
                VALID=false
                REASON="루트 디렉토리의 파일 ($file) 수정은 허용되지 않습니다."
                break
              fi
              
              if [[ "$file" == .github/* ]]; then
                VALID=false
                REASON=".github 디렉토리 수정은 허용되지 않습니다."
                break
              fi
              
              # 사용자 폴더 내 파일인지 확인
              if [[ "$file" == */* ]]; then
                FILE_FOLDER=$(echo "$file" | cut -d'/' -f1)
                
                # 폴더명이 매핑된 폴더와 일치하는지 확인
                if [ "$FILE_FOLDER" != "$FOLDER_NAME" ]; then
                  VALID=false
                  REASON="다른 사용자의 폴더 ($FILE_FOLDER) 수정은 허용되지 않습니다. 본인의 폴더 ($FOLDER_NAME)만 수정 가능합니다."
                  break
                fi
                
                # 허용되는 파일 형식인지 확인 (선택적)
                if [[ "$file" == *README.md ]] || [[ "$file" == *.py ]] || [[ "$file" == *.cpp ]] || [[ "$file" == *.java ]] || [[ "$file" == *.js ]] || [[ "$file" == *.c ]]; then
                  echo "✅ 허용되는 파일: $file"
                else
                  echo "⚠️ 알 수 없는 파일 형식이지만 허용: $file"
                fi
              else
                VALID=false
                REASON="폴더 구조를 따르지 않는 파일입니다: $file"
                break
              fi
            done
          fi

          # 3. 최소 하나의 문제 폴더가 있는지 확인
          if [ "$VALID" = "true" ]; then
            PROBLEM_FOLDERS=$(echo "$CHANGED_FILES" | tr ' ' '\n' | grep "^$FOLDER_NAME/[0-9]" | head -1)
            if [ -z "$PROBLEM_FOLDERS" ]; then
              VALID=false
              REASON="문제 번호 폴더가 포함되지 않았습니다. (예: $FOLDER_NAME/1000/)"
            fi
          fi

          echo "valid=$VALID" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT

          if [ "$VALID" = "true" ]; then
            echo "✅ PR 검증 통과!"
          else
            echo "❌ PR 검증 실패: $REASON"
          fi

      - name: Comment on PR if validation fails
        if: steps.validate.outputs.valid == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const reason = '${{ steps.validate.outputs.reason }}';
            const githubId = '${{ steps.pr-info.outputs.github_id }}';
            const folderName = '${{ steps.pr-info.outputs.folder_name }}';

            const comment = `❌ **PR 자동 검증 실패**

            **실패 사유:** ${reason}

            **규칙:**
            1. 본인의 폴더(\`${folderName || githubId}/\`)에 있는 파일만 수정 가능합니다
            2. 문제 번호 폴더(예: \`${folderName || githubId}/1000/\`)가 포함되어야 합니다
            3. 루트 파일이나 다른 사용자 폴더 수정은 불가합니다
            4. \`.github\` 폴더 수정은 불가합니다

            **GitHub ID와 폴더 매핑:**
            - GitHub ID: ${githubId}
            - 허용된 폴더: ${folderName || '매핑되지 않음'}

            **수정 후 다시 푸시해주세요!** 🔄`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Comment on PR if validation passes
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const githubId = '${{ steps.pr-info.outputs.github_id }}';
            const folderName = '${{ steps.pr-info.outputs.folder_name }}';
            const changedFiles = '${{ steps.files.outputs.changed_files }}';

            const comment = `✅ **PR 자동 검증 통과!**

            **검증된 내용:**
            - GitHub ID: ${githubId}
            - 허용된 폴더: ${folderName}
            - 수정된 파일들: ${changedFiles}

            모든 규칙을 만족하여 자동으로 머지됩니다. 🎉`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Auto approve PR
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: '🤖 자동 승인: 모든 검증 규칙을 만족합니다!'
            });

      - name: Auto merge PR
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                commit_title: `Auto-merge: ${context.payload.pull_request.title}`,
                commit_message: `자동 머지됨 - ${{ steps.pr-info.outputs.github_id }}(${{ steps.pr-info.outputs.folder_name }})의 문제 풀이`,
                merge_method: 'squash'
              });
              console.log('✅ PR이 성공적으로 머지되었습니다!');
            } catch (error) {
              console.log('❌ 머지 실패:', error.message);
              
              // 머지 실패 시 코멘트 추가
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `❌ **자동 머지 실패**\n\n오류: ${error.message}\n\n수동으로 머지해주세요.`
              });
            }

      - name: Trigger README update
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // README 업데이트 워크플로우 트리거
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'update-readme.yml',
              ref: 'main'
            });
            console.log('✅ README 업데이트 워크플로우가 트리거되었습니다!');

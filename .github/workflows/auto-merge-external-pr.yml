name: Auto Merge External PR

on:
  pull_request_target: # 외부 포크 PR도 메인 레포 권한으로 실행
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  validate-and-merge-external:
    runs-on: ubuntu-latest
    # 외부 포크에서 온 PR만 처리
    if: github.event.pull_request.head.repo.full_name != github.repository
    permissions:
      contents: write
      pull-requests: write
      checks: read
      actions: read
      issues: write
      repository-projects: read
      statuses: read

    steps:
      - name: Checkout base repository (안전한 체크아웃)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          # 주의: 외부 PR의 코드가 아닌 메인 레포의 코드를 체크아웃

      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Security check - 워크플로우 파일 변경 확인
        run: |
          # PR의 변경사항을 GitHub API로 가져와서 확인 (더 안전한 방법)
          echo "PR 번호: ${{ github.event.number }}"
          echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "Head SHA: ${{ github.event.pull_request.head.sha }}"

          # GitHub API를 통해 PR의 변경된 파일 목록 가져오기 (rate limit 대응)
          HTTP_STATUS=$(curl -s -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/files" \
               -o api_response.json)

          if [ "$HTTP_STATUS" -eq 200 ]; then
            jq -r '.[].filename' api_response.json > pr_changed_files.txt
            echo "✅ API로 파일 목록 가져오기 성공"
          else
            echo "❌ GitHub API 호출 실패 (HTTP: $HTTP_STATUS)"
            echo "Rate limit 또는 권한 문제 가능성"
            exit 1
          fi

          echo "PR에서 변경된 파일들:"
          cat pr_changed_files.txt

          # 보안 검사: .github/workflows 디렉토리 변경 시 중단
          WORKFLOW_CHANGES=$(cat pr_changed_files.txt | grep "^\.github/workflows/" || echo "")
          if [ -n "$WORKFLOW_CHANGES" ]; then
            echo "❌ 보안 위험: 워크플로우 파일 변경이 감지됨"
            echo "변경된 워크플로우 파일들: $WORKFLOW_CHANGES"
            echo "외부 PR에서 워크플로우 변경은 허용되지 않습니다."
            exit 1
          fi

          # 기타 민감한 파일들 체크
          SENSITIVE_CHANGES=$(cat pr_changed_files.txt | grep -E "^\.github/(scripts/|CODEOWNERS|.*\.yml$|.*\.yaml$)" | grep -v "^\.github/workflows/" || echo "")
          if [ -n "$SENSITIVE_CHANGES" ]; then
            echo "❌ 보안 위험: 민감한 파일 변경이 감지됨"
            echo "변경된 파일들: $SENSITIVE_CHANGES"
            echo "외부 PR에서 .github 디렉토리 파일 변경은 허용되지 않습니다."
            exit 1
          fi

      - name: Get PR author and map to folder
        id: pr-info
        run: |
          GITHUB_ID="${{ github.event.pull_request.user.login }}"
          echo "GitHub ID: $GITHUB_ID"

          # 매핑 파일에서 폴더명 찾기
          FOLDER_NAME=""
          if [ -f ".github/user-mapping.yml" ]; then
            echo "📁 매핑 파일 존재 확인됨"
            
            # YAML 파일에서 정확한 매핑 찾기 (개선된 파싱)
            MAPPING_LINE=$(grep "^$GITHUB_ID:" .github/user-mapping.yml | head -1 || echo "")
            if [ -n "$MAPPING_LINE" ]; then
              # "key: "value"" 형식에서 value 추출
              FOLDER_NAME=$(echo "$MAPPING_LINE" | cut -d'"' -f2)
              if [ -n "$FOLDER_NAME" ]; then
                echo "✅ 매핑 발견: $GITHUB_ID -> $FOLDER_NAME"
              else
                echo "⚠️ 매핑 파싱 실패: $MAPPING_LINE"
                FOLDER_NAME=""
              fi
            else
              echo "❌ 매핑을 찾을 수 없음: $GITHUB_ID"
              echo "📋 사용 가능한 매핑들:"
              grep "^[^#].*:" .github/user-mapping.yml | head -5
            fi
          else
            echo "❌ 매핑 파일이 없음: .github/user-mapping.yml"
          fi

          echo "github_id=$GITHUB_ID" >> $GITHUB_OUTPUT
          echo "folder_name=$FOLDER_NAME" >> $GITHUB_OUTPUT
          echo "PR 작성자: $GITHUB_ID (폴더: $FOLDER_NAME)"

      - name: Get changed files
        id: files
        run: |
          # PR에서 변경된 파일들을 이미 가져왔으므로 재사용
          if [ -f pr_changed_files.txt ]; then
            echo "변경된 파일들:"
            cat pr_changed_files.txt
            CHANGED_FILES=$(cat pr_changed_files.txt | tr '\n' ' ')
          else
            # API 호출이 실패한 경우 fallback
            echo "API에서 파일 목록을 가져오지 못했습니다. Git으로 대체합니다."
            git diff --name-only main..HEAD > changed_files.txt
            echo "변경된 파일들:"
            cat changed_files.txt
            CHANGED_FILES=$(cat changed_files.txt | tr '\n' ' ')
          fi

          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Validate changes
        id: validate
        run: |
          GITHUB_ID="${{ steps.pr-info.outputs.github_id }}"
          FOLDER_NAME="${{ steps.pr-info.outputs.folder_name }}"
          CHANGED_FILES="${{ steps.files.outputs.changed_files }}"

          echo "🔍 외부 PR 검증 시작..."
          echo "GitHub ID: $GITHUB_ID"
          echo "허용된 폴더명: $FOLDER_NAME"
          echo "변경된 파일들: $CHANGED_FILES"

          # 검증 규칙 (더 엄격하게)
          VALID=true
          REASON=""

          # 0. 매핑된 폴더명이 있는지 확인
          if [ -z "$FOLDER_NAME" ]; then
            VALID=false
            REASON="GitHub ID ($GITHUB_ID)에 대한 폴더 매핑을 찾을 수 없습니다. 관리자에게 문의하세요."
          fi

          # 1. 변경된 파일이 있는지 확인
          if [ -z "$CHANGED_FILES" ] && [ "$VALID" = "true" ]; then
            VALID=false
            REASON="변경된 파일이 없습니다."
          fi

          # 2. 각 변경된 파일이 해당 사용자 폴더 내에 있는지 확인 (더 엄격)
          if [ "$VALID" = "true" ]; then
            for file in $CHANGED_FILES; do
              echo "검사 중인 파일: $file"
              
              # 루트 파일들은 절대 허용하지 않음
              if [[ "$file" == *.md ]] && [[ "$file" != */* ]]; then
                VALID=false
                REASON="루트 디렉토리의 파일 ($file) 수정은 외부 PR에서 허용되지 않습니다."
                break
              fi
              
              # .github 디렉토리는 절대 허용하지 않음
              if [[ "$file" == .github/* ]]; then
                VALID=false
                REASON=".github 디렉토리 수정은 외부 PR에서 허용되지 않습니다."
                break
              fi
              
              # 다른 설정 파일들도 차단
              if [[ "$file" == .gitignore ]] || [[ "$file" == LICENSE ]] || [[ "$file" == .* ]]; then
                VALID=false
                REASON="설정 파일 ($file) 수정은 외부 PR에서 허용되지 않습니다."
                break
              fi
              
              # 사용자 폴더 내 파일인지 확인
              if [[ "$file" == */* ]]; then
                FILE_FOLDER=$(echo "$file" | cut -d'/' -f1)
                
                # 폴더명이 매핑된 폴더와 일치하는지 확인
                if [ "$FILE_FOLDER" != "$FOLDER_NAME" ]; then
                  VALID=false
                  REASON="다른 사용자의 폴더 ($FILE_FOLDER) 수정은 허용되지 않습니다. 본인의 폴더 ($FOLDER_NAME)만 수정 가능합니다."
                  break
                fi
                
                # 허용되는 파일 형식인지 확인 (더 엄격)
                if [[ "$file" == *README.md ]] || [[ "$file" == *.py ]] || [[ "$file" == *.cpp ]] || [[ "$file" == *.java ]] || [[ "$file" == *.js ]] || [[ "$file" == *.c ]] || [[ "$file" == *.rs ]] || [[ "$file" == *.py3 ]]; then
                  echo "✅ 허용되는 파일: $file"
                else
                  VALID=false
                  REASON="허용되지 않는 파일 형식입니다: $file"
                  break
                fi
              else
                VALID=false
                REASON="폴더 구조를 따르지 않는 파일입니다: $file"
                break
              fi
            done
          fi

          # 3. 최소 하나의 문제 폴더가 있는지 확인
          if [ "$VALID" = "true" ]; then
            PROBLEM_FOLDERS=$(echo "$CHANGED_FILES" | tr ' ' '\n' | grep "^$FOLDER_NAME/[0-9]" | head -1)
            if [ -z "$PROBLEM_FOLDERS" ]; then
              VALID=false
              REASON="문제 번호 폴더가 포함되지 않았습니다. (예: $FOLDER_NAME/1000/)"
            fi
          fi

          echo "valid=$VALID" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT

          if [ "$VALID" = "true" ]; then
            echo "✅ 외부 PR 검증 통과!"
          else
            echo "❌ 외부 PR 검증 실패: $REASON"
          fi

      - name: Comment on PR if validation fails
        if: steps.validate.outputs.valid == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const reason = '${{ steps.validate.outputs.reason }}';
            const githubId = '${{ steps.pr-info.outputs.github_id }}';
            const folderName = '${{ steps.pr-info.outputs.folder_name }}';

            const comment = `❌ **외부 PR 자동 검증 실패**

            **실패 사유:** ${reason}

            **외부 PR 규칙 (더 엄격):**
            1. 본인의 폴더(\`${folderName || githubId}/\`)에 있는 코드 파일만 수정 가능합니다
            2. 문제 번호 폴더(예: \`${folderName || githubId}/1000/\`)가 포함되어야 합니다
            3. 루트 파일, 설정 파일, .github 폴더 수정은 절대 불가합니다
            4. 허용되는 파일 형식: .py, .cpp, .java, .js, .c, .rs, .py3, README.md

            **GitHub ID와 폴더 매핑:**
            - GitHub ID: ${githubId}
            - 허용된 폴더: ${folderName || '매핑되지 않음'}

            **수정 후 다시 푸시해주세요!** 🔄`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Comment on PR if validation passes
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const githubId = '${{ steps.pr-info.outputs.github_id }}';
            const folderName = '${{ steps.pr-info.outputs.folder_name }}';
            const changedFiles = '${{ steps.files.outputs.changed_files }}';

            const comment = `✅ **외부 PR 자동 검증 통과!**

            **검증된 내용:**
            - GitHub ID: ${githubId}
            - 허용된 폴더: ${folderName}
            - 수정된 파일들: ${changedFiles}

            모든 보안 규칙을 만족하여 자동으로 머지됩니다. 🎉

            ⚠️ **보안 알림**: 이는 외부 기여자의 PR이므로 추가 보안 검증을 거쳤습니다.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Auto approve PR
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: '🤖 자동 승인: 모든 보안 검증 규칙을 만족합니다! (외부 PR 검증 완료)'
            });

      - name: Auto merge PR
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                commit_title: `Auto-merge (External): ${context.payload.pull_request.title}`,
                commit_message: `외부 PR 자동 머지됨 - ${{ steps.pr-info.outputs.github_id }}(${{ steps.pr-info.outputs.folder_name }})의 문제 풀이`,
                merge_method: 'squash'
              });
              console.log('✅ 외부 PR이 성공적으로 머지되었습니다!');
            } catch (error) {
              console.log('❌ 외부 PR 머지 실패:', error.message);
              console.log('에러 상세:', error);
              
              // 머지 실패 시 코멘트 추가
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `❌ **외부 PR 자동 머지 실패**\n\n**오류:** ${error.message}\n\n**가능한 원인:**\n- 충돌(conflict)이 발생했을 수 있습니다\n- 브랜치 보호 규칙에 의해 차단되었을 수 있습니다\n- 필수 체크가 완료되지 않았을 수 있습니다\n\n**해결방법:** 관리자가 수동으로 머지하거나 충돌을 해결해주세요.`
              });
              throw error;
            }
